이 코드는 Spring Cloud Config를 사용하여 .yml 파일에서 다국어 메시지를 가져오는 java 소스코드이고

package com.hae.approval.general.spring.config;

import lombok.RequiredArgsConstructor;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

import java.util.Locale;

/**
 * Locale에 따른 다국어 코드 조회 클래스 </br>
 * Locale이 KOREAN일 경우, 한국어 메시지를 반환하고, ENGLISH일 경우 영어 메시지를 반환</br>
 * 다국어 코드 데이터는 소스코드 저장소의 multiLanguageXX-dev.yml에서 확인 가능</br>
 * {@see https://gitlab.hmg-corp.io/p-23-1789-121_kpoc/spring-cloud-config.git}</br>
 * </br>
 * ex. H109 회사코드의 PasswordLost_Job_GROUPWARE_DESC    </br>
 * en.H109.PasswordLost_Job_GROUPWARE_DESC.value (multiLanguageEn-dev.yml) -> getValue("PasswordLost_Job_GROUPWARE_DESC", Locale.ENGLISH, "H109") (MultiLanguage.java)</br>
 *
 * @author 민초현/엔터프라이즈IT개발팀
 * @since 2024-04-21
 */
@Component
@RefreshScope
@RequiredArgsConstructor
public class MultiLanguage {

    private final Environment env;

    /**
     * @param key
     * @return
     *
     * @see #getValue(String, Locale, String)
     */
    public String getValue(String key){
        return getValue(key, "ORGROOT");
    }

    /**
     * @param key
     * @param companyCode
     * @return
     *
     * @see #getValue(String, Locale, String)
     */
    public String getValue(String key, String companyCode){
        return getValue(key, Locale.KOREAN, companyCode);
    }

    /**
     * @param key
     * @param locale
     * @return
     *
     * @see #getValue(String, Locale, String)
     */
    public String getValue(String key, Locale locale){
        return getValue(key, locale, "ORGROOT");
    }

    /**
     * @param key 검색하려는 다국어 키
     * @param locale 조회 결과 언어. 기본값 KOREAN
     * @param companyCode 색하려는 다국어 키의 소속 회사 코드. 기본값 ORGROOT
     * @return 검색하려는 다국어 값. 키가 부재하거나 미사용중이면 키를 반환
     */
    public String getValue(String key, Locale locale, String companyCode){

        switch (locale.getLanguage()){
            case "ko" :
            case "en" :
                return getValueLanguage(key, companyCode, locale.getLanguage());
            default:
                return key;
        }
    }

    private String getValueLanguage(String key, String companyCode, String languageCode) {

        String value = languageCode + "." + companyCode + "." + key + ".value";
        String useYn = languageCode + "." + companyCode + "." + key + ".use-yn";

        if(env.containsProperty(value) && "Y".equals(env.getProperty(useYn, ""))) {
            return env.getProperty(value);
        }

        return key;
    }
}


이건 yml파일 구조야

ko:
  H109:
    PasswordLost_Job_GROUPWARE_DESC:
      use-yn: "Y"
      value: "<font style=\"font-size:9pt;font-family:굴림\" color=\"#FF0000\">※ 초기\
        \ Password : A!#+사번 (예: A!#1234567 ) (접속 후 즉시 변경요망)</font>"
    msg_password_change_body:
      use-yn: "Y"
      value: "PASSWORD 가 초기화 되었습니다. 로그인 후 즉시 변경바랍니다.<br>- 초기 PASSWORD: A!#+사번<br>예\
        ) 사번 : 1234567 초기 PASSWORD : A!#1234567"
  K101:
    FormName_K101_IMMP:
      use-yn: "Y"
      value: "사업계획"
    FormName_K101_SPF5:
      use-yn: "Y"
      value: "자금관리(TR)"
    FormName_K101_SPF1:
      use-yn: "Y"
      value: "전표결재"
    FormName_K101_SPF2:
      use-yn: "Y"
      value: "채무관리(AP)"



여기서

매개변수를 Locale locale, String companyCode 를 받았을때,
use-yn 이 "Y"인 모든 값의 key와 value 를 List로 return 하는 함수를 추가해줘




public List<Map<String, String>> getKoreanMessagesWithUseYn(Locale locale, String companyCode) {
        String languageCode = locale.getLanguage();
        
        return env.getPropertyNames().stream()
                .filter(property -> languageCode.equals("ko") && property.endsWith(".use-yn"))
                .filter(property -> "Y".equals(env.getProperty(property)))
                .map(property -> {
                    String key = property.substring(3, property.lastIndexOf("."));
                    String value = env.getProperty("ko." + companyCode + "." + key + ".value");
                    return Map.of("key", key, "value", value);
                })
                .collect(Collectors.toList());
    }
