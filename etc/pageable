package com.hae.approval.box.online.service.query;

import com.hae.approval.box.common.dto.query.in.ProceedDocumentQueryInDto;
import com.hae.approval.box.common.dto.query.out.ProceedDocumentBoxQueryOutDto;
import com.hae.approval.box.common.repository.v1.custom.ProceedDocumentBoxRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
@Service
@Slf4j
@RequiredArgsConstructor
public class ProceedDocumentBoxQueryServiceImpl implements ProceedDocumentBoxQueryService{
    private final ProceedDocumentBoxRepository proceedDocumentBoxRepository;

    @Override
    public List<ProceedDocumentBoxQueryOutDto> findProceedDocumentBox(ProceedDocumentQueryInDto inDto) {
        String sort;
        Integer page;
        Integer size;
        Pageable pageable = null;
        return proceedDocumentBoxRepository.findProceedDocumentBox(inDto.getCompanyCode(), inDto.getUserId(), pageable);
    }
}


@Service
@Slf4j
@RequiredArgsConstructor
public class ProceedDocumentBoxQueryServiceImpl implements ProceedDocumentBoxQueryService {

    private final ProceedDocumentBoxRepository proceedDocumentBoxRepository;

    @Override
    public List<ProceedDocumentBoxQueryOutDto> findProceedDocumentBox(ProceedDocumentQueryInDto inDto) {
        // 예를 들어, sort, page, size를 inDto에서 가져온다고 가정
        String sort = inDto.getSort();
        Integer page = inDto.getPage();
        Integer size = inDto.getSize();

        Pageable pageable = PageRequest.of(page, size); // PageRequest를 사용하여 Pageable 객체 생성

        return proceedDocumentBoxRepository.findProceedDocumentBox(inDto.getCompanyCode(), inDto.getUserId(), pageable);
    }
}



@Override
    public List<ProceedDocumentBoxQueryOutDto> findProceedDocumentBox(ProceedDocumentQueryInDto inDto) {
        // 예를 들어, sort, page, size를 inDto에서 가져온다고 가정
        String sort = inDto.getSort();
        Integer page = inDto.getPage();
        Integer size = inDto.getSize();

        Pageable pageable;

        if (sort != null && !sort.isEmpty()) {
            String[] sortArr = sort.split(",");
            Sort.Direction direction = Sort.Direction.ASC;
            if (sortArr.length > 1 && "desc".equalsIgnoreCase(sortArr[1])) {
                direction = Sort.Direction.DESC;
            }

            pageable = PageRequest.of(page, size, direction, sortArr[0]);
        } else {
            pageable = PageRequest.of(page, size);
        }

        return proceedDocumentBoxRepository.findProceedDocumentBox(inDto.getCompanyCode(), inDto.getUserId(), pageable);
    }





package com.hae.approval.box.common.repository.v1.custom;

import com.hae.approval.box.common.dto.query.out.ProceedDocumentBoxQueryOutDto;
import com.hae.approval.box.common.util.RepositoryUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jooq.DSLContext;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

import java.util.List;

import static com.hae.approval.box.dsl.tables.DocumentStatus.DOCUMENT_STATUS;
import static com.hae.approval.box.dsl.tables.ProceedDocumentBox.PROCEED_DOCUMENT_BOX;

@Repository
@RequiredArgsConstructor
@Slf4j
public class ProceedDocumentBoxRepositoryImpl implements ProceedDocumentBoxRepository{
    private final DSLContext dsl;

    @Override
    public List<ProceedDocumentBoxQueryOutDto> findProceedDocumentBox(String companyCode, String userId, Pageable pageable) {
        return dsl.select(PROCEED_DOCUMENT_BOX.USER_ID,
                        PROCEED_DOCUMENT_BOX.COMPANY_CODE,
                        DOCUMENT_STATUS.DOCUMENT_TITLE,
                        DOCUMENT_STATUS.DOCUMENT_ID,
                        DOCUMENT_STATUS.APPROVAL_LINE_ID,
                        DOCUMENT_STATUS.PARENT_APPROVAL_LINE_ID,
                        DOCUMENT_STATUS.DOCUMENT_STATUS_CODE,
                        DOCUMENT_STATUS.FORM_CODE,
                        DOCUMENT_STATUS.FORM_NAME,
                        DOCUMENT_STATUS.FORM_NAME_EN,
                        DOCUMENT_STATUS.CURRENT_APPROVER_ID,
                        DOCUMENT_STATUS.CURRENT_APPROVER_NAME,
                        DOCUMENT_STATUS.CURRENT_APPROVER_NAME_EN,
                        DOCUMENT_STATUS.SUBMIT_DATETIME,
                        DOCUMENT_STATUS.APPROVAL_LINE_CURRENT_NO,
                        DOCUMENT_STATUS.APPROVAL_LINE_TOTAL_NO)
                .from(DOCUMENT_STATUS)
                .join(PROCEED_DOCUMENT_BOX).on(DOCUMENT_STATUS.DOCUMENT_STATUS_ID.eq(PROCEED_DOCUMENT_BOX.DOCUMENT_STATUS_ID))
                .where(PROCEED_DOCUMENT_BOX.USER_ID.eq(userId))
                .and(PROCEED_DOCUMENT_BOX.COMPANY_CODE.eq(companyCode))
                .and(PROCEED_DOCUMENT_BOX.DISPLAY_YN.eq("Y"))
                .fetchInto(ProceedDocumentBoxQueryOutDto.class);
    }

}






@Repository
@RequiredArgsConstructor
@Slf4j
public class ProceedDocumentBoxRepositoryImpl implements ProceedDocumentBoxRepository {
    private final DSLContext dsl;

    @Override
    public List<ProceedDocumentBoxQueryOutDto> findProceedDocumentBox(String companyCode, String userId, Pageable pageable) {
        SelectLimitStep<?> select = dsl
                .select(PROCEED_DOCUMENT_BOX.USER_ID,
                        PROCEED_DOCUMENT_BOX.COMPANY_CODE,
                        DOCUMENT_STATUS.DOCUMENT_TITLE,
                        DOCUMENT_STATUS.DOCUMENT_ID,
                        DOCUMENT_STATUS.APPROVAL_LINE_ID,
                        DOCUMENT_STATUS.PARENT_APPROVAL_LINE_ID,
                        DOCUMENT_STATUS.DOCUMENT_STATUS_CODE,
                        DOCUMENT_STATUS.FORM_CODE,
                        DOCUMENT_STATUS.FORM_NAME,
                        DOCUMENT_STATUS.FORM_NAME_EN,
                        DOCUMENT_STATUS.CURRENT_APPROVER_ID,
                        DOCUMENT_STATUS.CURRENT_APPROVER_NAME,
                        DOCUMENT_STATUS.CURRENT_APPROVER_NAME_EN,
                        DOCUMENT_STATUS.SUBMIT_DATETIME,
                        DOCUMENT_STATUS.APPROVAL_LINE_CURRENT_NO,
                        DOCUMENT_STATUS.APPROVAL_LINE_TOTAL_NO)
                .from(DOCUMENT_STATUS)
                .join(PROCEED_DOCUMENT_BOX).on(DOCUMENT_STATUS.DOCUMENT_STATUS_ID.eq(PROCEED_DOCUMENT_BOX.DOCUMENT_STATUS_ID))
                .where(PROCEED_DOCUMENT_BOX.USER_ID.eq(userId))
                .and(PROCEED_DOCUMENT_BOX.COMPANY_CODE.eq(companyCode))
                .and(PROCEED_DOCUMENT_BOX.DISPLAY_YN.eq("Y"))
                .limit(pageable.getPageSize())
                .offset((int) pageable.getOffset());

        return select.fetchInto(ProceedDocumentBoxQueryOutDto.class);
    }
}

