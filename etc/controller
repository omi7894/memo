@GetMapping(value="/document-box-count2")
    @Operation(summary = "문서함 카운트 조회2", tags = "결재함 공통")
    public ResponseDto<Map<String, Integer>> findPersonalDocumentBoxCount2(@Valid PersonInfoQueryInDto personInfoQueryInDto){
        List<DocumentBoxCountQueryOutDto> documentBoxCountQueryOutDtoList = documentBoxCountQueryService.findPersonalDocumentBoxCount(personInfoQueryInDto);
        Map<String, Integer> result = new HashMap<>();
        return ResponseDto.success(result);
    }


@GetMapping(value="/document-box-count2")
@Operation(summary = "문서함 카운트 조회2", tags = "결재함 공통")
public ResponseDto<Map<String, Integer>> findPersonalDocumentBoxCount2(@Valid PersonInfoQueryInDto personInfoQueryInDto){
    List<DocumentBoxCountQueryOutDto> documentBoxCountQueryOutDtoList = documentBoxCountQueryService.findPersonalDocumentBoxCount(personInfoQueryInDto);
    Map<String, Integer> result = new HashMap<>();

    for (DocumentBoxCountQueryOutDto dto : documentBoxCountQueryOutDtoList) {
        result.put(dto.getBoxTypeCode(), dto.getCount());
    }

    return ResponseDto.success(result);
}

@GetMapping(value="/document-box-count2")
@Operation(summary = "문서함 카운트 조회2", tags = "결재함 공통")
public ResponseDto<Map<String, Integer>> findPersonalDocumentBoxCount2(@Valid PersonInfoQueryInDto personInfoQueryInDto){
    try {
        List<DocumentBoxCountQueryOutDto> documentBoxCountQueryOutDtoList = documentBoxCountQueryService.findPersonalDocumentBoxCount(personInfoQueryInDto);
        Map<String, Integer> result = new HashMap<>();

        for (DocumentBoxCountQueryOutDto dto : documentBoxCountQueryOutDtoList) {
            result.put(dto.getBoxTypeCode(), dto.getCount());
        }

        return ResponseDto.success(result);
    } catch (Exception e) {
        return ResponseDto.fail("Failed to retrieve document box count", e.getMessage());
    }
}
